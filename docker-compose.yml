services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-interviewer-db
    environment:
      POSTGRES_DB: ai_interviewer
      POSTGRES_USER: interviewer_user
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U interviewer_user -d ai_interviewer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-interviewer-network

  # Backend API
  backend:
    build: ./backend
    container_name: ai-interviewer-backend
    environment:
      DATABASE_URL: postgresql://interviewer_user:secure_password_123@postgres:5432/ai_interviewer
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      WHISPER_MODEL: ${WHISPER_MODEL:-whisper-1}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-us-east-1-aws}
      PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME:-ai-interviewer}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:3001"]'
      MAX_INTERVIEW_DURATION: ${MAX_INTERVIEW_DURATION:-60}
      DEFAULT_QUESTION_COUNT: ${DEFAULT_QUESTION_COUNT:-10}
      DEBUG: ${DEBUG:-false}
    ports:
      - "0.0.0.0:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/audio_cache:/app/audio_cache
    networks:
      - ai-interviewer-network
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: ai-interviewer-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "0.0.0.0:3000:3000"
    depends_on:
      - backend
    networks:
      - ai-interviewer-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  ai-interviewer-network:
    driver: bridge
